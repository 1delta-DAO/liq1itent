/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [
  nativeFee: bigint,
  lzTokenFee: bigint
] & { nativeFee: bigint; lzTokenFee: bigint };

export declare namespace OrderLib {
  export type CrossChainOrderStruct = {
    settlementContract: BytesLike;
    swapper: BytesLike;
    nonce: BigNumberish;
    originChainId: BigNumberish;
    initiateDeadline: BigNumberish;
    fillDeadline: BigNumberish;
    destinationChainId: BigNumberish;
    destinationReceiver: BytesLike;
    destinationSettlementContract: BytesLike;
    originToken: BytesLike;
    originAmount: BigNumberish;
    destinationToken: BytesLike;
    destinationAmount: BigNumberish;
  };

  export type CrossChainOrderStructOutput = [
    settlementContract: string,
    swapper: string,
    nonce: bigint,
    originChainId: bigint,
    initiateDeadline: bigint,
    fillDeadline: bigint,
    destinationChainId: bigint,
    destinationReceiver: string,
    destinationSettlementContract: string,
    originToken: string,
    originAmount: bigint,
    destinationToken: string,
    destinationAmount: bigint
  ] & {
    settlementContract: string;
    swapper: string;
    nonce: bigint;
    originChainId: bigint;
    initiateDeadline: bigint;
    fillDeadline: bigint;
    destinationChainId: bigint;
    destinationReceiver: string;
    destinationSettlementContract: string;
    originToken: string;
    originAmount: bigint;
    destinationToken: string;
    destinationAmount: bigint;
  };

  export type InputStruct = { token: BytesLike; amount: BigNumberish };

  export type InputStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type OutputStruct = {
    token: BytesLike;
    amount: BigNumberish;
    recipient: BytesLike;
    chainId: BigNumberish;
  };

  export type OutputStructOutput = [
    token: string,
    amount: bigint,
    recipient: string,
    chainId: bigint
  ] & { token: string; amount: bigint; recipient: string; chainId: bigint };

  export type ResolvedCrossChainOrderStruct = {
    settlementContract: BytesLike;
    swapper: BytesLike;
    nonce: BigNumberish;
    originChainId: BigNumberish;
    initiateDeadline: BigNumberish;
    fillDeadline: BigNumberish;
    swapperInputs: OrderLib.InputStruct[];
    swapperOutputs: OrderLib.OutputStruct[];
    fillerOutputs: OrderLib.OutputStruct[];
  };

  export type ResolvedCrossChainOrderStructOutput = [
    settlementContract: string,
    swapper: string,
    nonce: bigint,
    originChainId: bigint,
    initiateDeadline: bigint,
    fillDeadline: bigint,
    swapperInputs: OrderLib.InputStructOutput[],
    swapperOutputs: OrderLib.OutputStructOutput[],
    fillerOutputs: OrderLib.OutputStructOutput[]
  ] & {
    settlementContract: string;
    swapper: string;
    nonce: bigint;
    originChainId: bigint;
    initiateDeadline: bigint;
    fillDeadline: bigint;
    swapperInputs: OrderLib.InputStructOutput[];
    swapperOutputs: OrderLib.OutputStructOutput[];
    fillerOutputs: OrderLib.OutputStructOutput[];
  };
}

export interface MockSettlementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REFUND_ADDRESS"
      | "THIS_CHAIN_ID"
      | "allowInitializePath"
      | "cancelOrder"
      | "emergencyWithdraw"
      | "endpoint"
      | "getOrderHash"
      | "getOrderTypeHash"
      | "initiate"
      | "isComposeMsgSender"
      | "lzReceive"
      | "mockSetChainId"
      | "mockSetChainIdEidPair"
      | "nextNonce"
      | "oAppVersion"
      | "owner"
      | "peers"
      | "quote"
      | "renounceOwnership"
      | "resolve"
      | "setDelegate"
      | "setPeer"
      | "settle"
      | "transferOwnership"
      | "verifySignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FillingCompleted"
      | "FillingInititated"
      | "Initialized"
      | "OrderCancelled"
      | "OwnershipTransferred"
      | "PeerSet"
      | "SolverPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "REFUND_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THIS_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [OrderLib.CrossChainOrderStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOrderHash",
    values: [OrderLib.CrossChainOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiate",
    values: [OrderLib.CrossChainOrderStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [OriginStruct, BytesLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetChainIdEidPair",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [OrderLib.CrossChainOrderStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BytesLike, OrderLib.CrossChainOrderStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "REFUND_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THIS_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initiate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSetChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetChainIdEidPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
}

export namespace FillingCompletedEvent {
  export type InputTuple = [hash: BytesLike];
  export type OutputTuple = [hash: string];
  export interface OutputObject {
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FillingInititatedEvent {
  export type InputTuple = [hash: BytesLike];
  export type OutputTuple = [hash: string];
  export interface OutputObject {
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [hash: BytesLike];
  export type OutputTuple = [hash: string];
  export interface OutputObject {
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerSetEvent {
  export type InputTuple = [eid: BigNumberish, peer: BytesLike];
  export type OutputTuple = [eid: bigint, peer: string];
  export interface OutputObject {
    eid: bigint;
    peer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SolverPaidEvent {
  export type InputTuple = [hash: BytesLike];
  export type OutputTuple = [hash: string];
  export interface OutputObject {
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockSettlement extends BaseContract {
  connect(runner?: ContractRunner | null): MockSettlement;
  waitForDeployment(): Promise<this>;

  interface: MockSettlementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REFUND_ADDRESS: TypedContractMethod<[], [string], "view">;

  THIS_CHAIN_ID: TypedContractMethod<[], [bigint], "view">;

  allowInitializePath: TypedContractMethod<
    [origin: OriginStruct],
    [boolean],
    "view"
  >;

  cancelOrder: TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct, endpointOptions: BytesLike],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  getOrderHash: TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct],
    [string],
    "view"
  >;

  getOrderTypeHash: TypedContractMethod<[], [string], "view">;

  initiate: TypedContractMethod<
    [
      order: OrderLib.CrossChainOrderStruct,
      signature: BytesLike,
      fillerData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isComposeMsgSender: TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;

  lzReceive: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  mockSetChainId: TypedContractMethod<
    [cId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mockSetChainIdEidPair: TypedContractMethod<
    [cId: BigNumberish, eId: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextNonce: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;

  oAppVersion: TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  peers: TypedContractMethod<[eid: BigNumberish], [string], "view">;

  quote: TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _message: BytesLike,
      _options: BytesLike,
      _payInLzToken: boolean
    ],
    [MessagingFeeStructOutput],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolve: TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct, fillerData: BytesLike],
    [OrderLib.ResolvedCrossChainOrderStructOutput],
    "view"
  >;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  setPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;

  settle: TypedContractMethod<
    [
      originAmountReceiver: BytesLike,
      order: OrderLib.CrossChainOrderStruct,
      endpointOptions: BytesLike
    ],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifySignature: TypedContractMethod<
    [orderHash: BytesLike, swapper: BytesLike, signature: BytesLike],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REFUND_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "THIS_CHAIN_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowInitializePath"
  ): TypedContractMethod<[origin: OriginStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct, endpointOptions: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOrderHash"
  ): TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderTypeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initiate"
  ): TypedContractMethod<
    [
      order: OrderLib.CrossChainOrderStruct,
      signature: BytesLike,
      fillerData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isComposeMsgSender"
  ): TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mockSetChainId"
  ): TypedContractMethod<[cId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mockSetChainIdEidPair"
  ): TypedContractMethod<
    [cId: BigNumberish, eId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextNonce"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "oAppVersion"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "peers"
  ): TypedContractMethod<[eid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _message: BytesLike,
      _options: BytesLike,
      _payInLzToken: boolean
    ],
    [MessagingFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolve"
  ): TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct, fillerData: BytesLike],
    [OrderLib.ResolvedCrossChainOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<
    [
      originAmountReceiver: BytesLike,
      order: OrderLib.CrossChainOrderStruct,
      endpointOptions: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifySignature"
  ): TypedContractMethod<
    [orderHash: BytesLike, swapper: BytesLike, signature: BytesLike],
    [void],
    "view"
  >;

  getEvent(
    key: "FillingCompleted"
  ): TypedContractEvent<
    FillingCompletedEvent.InputTuple,
    FillingCompletedEvent.OutputTuple,
    FillingCompletedEvent.OutputObject
  >;
  getEvent(
    key: "FillingInititated"
  ): TypedContractEvent<
    FillingInititatedEvent.InputTuple,
    FillingInititatedEvent.OutputTuple,
    FillingInititatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PeerSet"
  ): TypedContractEvent<
    PeerSetEvent.InputTuple,
    PeerSetEvent.OutputTuple,
    PeerSetEvent.OutputObject
  >;
  getEvent(
    key: "SolverPaid"
  ): TypedContractEvent<
    SolverPaidEvent.InputTuple,
    SolverPaidEvent.OutputTuple,
    SolverPaidEvent.OutputObject
  >;

  filters: {
    "FillingCompleted(bytes32)": TypedContractEvent<
      FillingCompletedEvent.InputTuple,
      FillingCompletedEvent.OutputTuple,
      FillingCompletedEvent.OutputObject
    >;
    FillingCompleted: TypedContractEvent<
      FillingCompletedEvent.InputTuple,
      FillingCompletedEvent.OutputTuple,
      FillingCompletedEvent.OutputObject
    >;

    "FillingInititated(bytes32)": TypedContractEvent<
      FillingInititatedEvent.InputTuple,
      FillingInititatedEvent.OutputTuple,
      FillingInititatedEvent.OutputObject
    >;
    FillingInititated: TypedContractEvent<
      FillingInititatedEvent.InputTuple,
      FillingInititatedEvent.OutputTuple,
      FillingInititatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OrderCancelled(bytes32)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PeerSet(uint32,bytes32)": TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
    PeerSet: TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;

    "SolverPaid(bytes32)": TypedContractEvent<
      SolverPaidEvent.InputTuple,
      SolverPaidEvent.OutputTuple,
      SolverPaidEvent.OutputObject
    >;
    SolverPaid: TypedContractEvent<
      SolverPaidEvent.InputTuple,
      SolverPaidEvent.OutputTuple,
      SolverPaidEvent.OutputObject
    >;
  };
}
