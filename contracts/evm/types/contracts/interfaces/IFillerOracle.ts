/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace OrderLib {
  export type CrossChainOrderStruct = {
    settlementContract: BytesLike;
    swapper: BytesLike;
    nonce: BigNumberish;
    originChainId: BigNumberish;
    initiateDeadline: BigNumberish;
    fillDeadline: BigNumberish;
    destinationChainId: BigNumberish;
    destinationSettlementContract: BytesLike;
    originToken: BytesLike;
    originAmount: BigNumberish;
    destinationToken: BytesLike;
    destinationAmount: BigNumberish;
  };

  export type CrossChainOrderStructOutput = [
    settlementContract: string,
    swapper: string,
    nonce: bigint,
    originChainId: bigint,
    initiateDeadline: bigint,
    fillDeadline: bigint,
    destinationChainId: bigint,
    destinationSettlementContract: string,
    originToken: string,
    originAmount: bigint,
    destinationToken: string,
    destinationAmount: bigint
  ] & {
    settlementContract: string;
    swapper: string;
    nonce: bigint;
    originChainId: bigint;
    initiateDeadline: bigint;
    fillDeadline: bigint;
    destinationChainId: bigint;
    destinationSettlementContract: string;
    originToken: string;
    originAmount: bigint;
    destinationToken: string;
    destinationAmount: bigint;
  };
}

export interface IFillerOracleInterface extends Interface {
  getFunction(nameOrSignature: "reportSettlementAttempt"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "reportSettlementAttempt",
    values: [OrderLib.CrossChainOrderStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "reportSettlementAttempt",
    data: BytesLike
  ): Result;
}

export interface IFillerOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IFillerOracle;
  waitForDeployment(): Promise<this>;

  interface: IFillerOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  reportSettlementAttempt: TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "reportSettlementAttempt"
  ): TypedContractMethod<
    [order: OrderLib.CrossChainOrderStruct, orderHash: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
