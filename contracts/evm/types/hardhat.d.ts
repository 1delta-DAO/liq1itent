/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutor__factory>;
    getContractFactory(
      name: "IExecutorFeeLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutorFeeLib__factory>;
    getContractFactory(
      name: "ILayerZeroExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroExecutor__factory>;
    getContractFactory(
      name: "ILayerZeroTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroTreasury__factory>;
    getContractFactory(
      name: "IWorker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWorker__factory>;
    getContractFactory(
      name: "MessageLibBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageLibBase__factory>;
    getContractFactory(
      name: "SendLibBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SendLibBase__factory>;
    getContractFactory(
      name: "DVNOptions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DVNOptions__factory>;
    getContractFactory(
      name: "UlnOptions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UlnOptions__factory>;
    getContractFactory(
      name: "IOAppCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppCore__factory>;
    getContractFactory(
      name: "IOAppReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppReceiver__factory>;
    getContractFactory(
      name: "OApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OApp__factory>;
    getContractFactory(
      name: "OAppCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppCore__factory>;
    getContractFactory(
      name: "OAppReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppReceiver__factory>;
    getContractFactory(
      name: "OAppSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppSender__factory>;
    getContractFactory(
      name: "EndpointV2ViewUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EndpointV2ViewUpgradeable__factory>;
    getContractFactory(
      name: "ILayerZeroEndpointV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpointV2__factory>;
    getContractFactory(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: "IMessageLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageLib__factory>;
    getContractFactory(
      name: "IMessageLibManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageLibManager__factory>;
    getContractFactory(
      name: "IMessagingChannel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingChannel__factory>;
    getContractFactory(
      name: "IMessagingComposer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingComposer__factory>;
    getContractFactory(
      name: "IMessagingContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingContext__factory>;
    getContractFactory(
      name: "ISendLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISendLib__factory>;
    getContractFactory(
      name: "AddressCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressCast__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "Transfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transfer__factory>;
    getContractFactory(
      name: "ExecutorOptions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutorOptions__factory>;
    getContractFactory(
      name: "MessagingContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessagingContext__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "IFillerOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFillerOracle__factory>;
    getContractFactory(
      name: "OrderSig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderSig__factory>;
    getContractFactory(
      name: "ILayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpoint__factory>;
    getContractFactory(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: "ILayerZeroUserApplicationConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfig__factory>;
    getContractFactory(
      name: "EndpointV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EndpointV2Mock__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockSettlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSettlement__factory>;
    getContractFactory(
      name: "Settlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Settlement__factory>;

    getContractAt(
      name: "IExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutor>;
    getContractAt(
      name: "IExecutorFeeLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutorFeeLib>;
    getContractAt(
      name: "ILayerZeroExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroExecutor>;
    getContractAt(
      name: "ILayerZeroTreasury",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroTreasury>;
    getContractAt(
      name: "IWorker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWorker>;
    getContractAt(
      name: "MessageLibBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageLibBase>;
    getContractAt(
      name: "SendLibBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SendLibBase>;
    getContractAt(
      name: "DVNOptions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DVNOptions>;
    getContractAt(
      name: "UlnOptions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UlnOptions>;
    getContractAt(
      name: "IOAppCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppCore>;
    getContractAt(
      name: "IOAppReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppReceiver>;
    getContractAt(
      name: "OApp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OApp>;
    getContractAt(
      name: "OAppCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppCore>;
    getContractAt(
      name: "OAppReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppReceiver>;
    getContractAt(
      name: "OAppSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppSender>;
    getContractAt(
      name: "EndpointV2ViewUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EndpointV2ViewUpgradeable>;
    getContractAt(
      name: "ILayerZeroEndpointV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    getContractAt(
      name: "ILayerZeroReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: "IMessageLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageLib>;
    getContractAt(
      name: "IMessageLibManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageLibManager>;
    getContractAt(
      name: "IMessagingChannel",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingChannel>;
    getContractAt(
      name: "IMessagingComposer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingComposer>;
    getContractAt(
      name: "IMessagingContext",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingContext>;
    getContractAt(
      name: "ISendLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISendLib>;
    getContractAt(
      name: "AddressCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressCast>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "Transfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Transfer>;
    getContractAt(
      name: "ExecutorOptions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutorOptions>;
    getContractAt(
      name: "MessagingContext",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessagingContext>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "IFillerOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFillerOracle>;
    getContractAt(
      name: "OrderSig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderSig>;
    getContractAt(
      name: "ILayerZeroEndpoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpoint>;
    getContractAt(
      name: "ILayerZeroReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: "ILayerZeroUserApplicationConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    getContractAt(
      name: "EndpointV2Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EndpointV2Mock>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockSettlement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSettlement>;
    getContractAt(
      name: "Settlement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Settlement>;

    deployContract(
      name: "IExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutor>;
    deployContract(
      name: "IExecutorFeeLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutorFeeLib>;
    deployContract(
      name: "ILayerZeroExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroExecutor>;
    deployContract(
      name: "ILayerZeroTreasury",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroTreasury>;
    deployContract(
      name: "IWorker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWorker>;
    deployContract(
      name: "MessageLibBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageLibBase>;
    deployContract(
      name: "SendLibBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SendLibBase>;
    deployContract(
      name: "DVNOptions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DVNOptions>;
    deployContract(
      name: "UlnOptions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UlnOptions>;
    deployContract(
      name: "IOAppCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOAppCore>;
    deployContract(
      name: "IOAppReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOAppReceiver>;
    deployContract(
      name: "OApp",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OApp>;
    deployContract(
      name: "OAppCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OAppCore>;
    deployContract(
      name: "OAppReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OAppReceiver>;
    deployContract(
      name: "OAppSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OAppSender>;
    deployContract(
      name: "EndpointV2ViewUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndpointV2ViewUpgradeable>;
    deployContract(
      name: "ILayerZeroEndpointV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    deployContract(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroReceiver>;
    deployContract(
      name: "IMessageLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageLib>;
    deployContract(
      name: "IMessageLibManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageLibManager>;
    deployContract(
      name: "IMessagingChannel",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessagingChannel>;
    deployContract(
      name: "IMessagingComposer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessagingComposer>;
    deployContract(
      name: "IMessagingContext",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessagingContext>;
    deployContract(
      name: "ISendLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISendLib>;
    deployContract(
      name: "AddressCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressCast>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Transfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Transfer>;
    deployContract(
      name: "ExecutorOptions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorOptions>;
    deployContract(
      name: "MessagingContext",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessagingContext>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "IFillerOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFillerOracle>;
    deployContract(
      name: "OrderSig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderSig>;
    deployContract(
      name: "ILayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroEndpoint>;
    deployContract(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroReceiver>;
    deployContract(
      name: "ILayerZeroUserApplicationConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    deployContract(
      name: "EndpointV2Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndpointV2Mock>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockSettlement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSettlement>;
    deployContract(
      name: "Settlement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Settlement>;

    deployContract(
      name: "IExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutor>;
    deployContract(
      name: "IExecutorFeeLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutorFeeLib>;
    deployContract(
      name: "ILayerZeroExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroExecutor>;
    deployContract(
      name: "ILayerZeroTreasury",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroTreasury>;
    deployContract(
      name: "IWorker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWorker>;
    deployContract(
      name: "MessageLibBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageLibBase>;
    deployContract(
      name: "SendLibBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SendLibBase>;
    deployContract(
      name: "DVNOptions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DVNOptions>;
    deployContract(
      name: "UlnOptions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UlnOptions>;
    deployContract(
      name: "IOAppCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOAppCore>;
    deployContract(
      name: "IOAppReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOAppReceiver>;
    deployContract(
      name: "OApp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OApp>;
    deployContract(
      name: "OAppCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OAppCore>;
    deployContract(
      name: "OAppReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OAppReceiver>;
    deployContract(
      name: "OAppSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OAppSender>;
    deployContract(
      name: "EndpointV2ViewUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndpointV2ViewUpgradeable>;
    deployContract(
      name: "ILayerZeroEndpointV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    deployContract(
      name: "ILayerZeroReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroReceiver>;
    deployContract(
      name: "IMessageLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageLib>;
    deployContract(
      name: "IMessageLibManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageLibManager>;
    deployContract(
      name: "IMessagingChannel",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessagingChannel>;
    deployContract(
      name: "IMessagingComposer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessagingComposer>;
    deployContract(
      name: "IMessagingContext",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessagingContext>;
    deployContract(
      name: "ISendLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISendLib>;
    deployContract(
      name: "AddressCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressCast>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "Transfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Transfer>;
    deployContract(
      name: "ExecutorOptions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorOptions>;
    deployContract(
      name: "MessagingContext",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessagingContext>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "IFillerOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFillerOracle>;
    deployContract(
      name: "OrderSig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderSig>;
    deployContract(
      name: "ILayerZeroEndpoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroEndpoint>;
    deployContract(
      name: "ILayerZeroReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroReceiver>;
    deployContract(
      name: "ILayerZeroUserApplicationConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    deployContract(
      name: "EndpointV2Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndpointV2Mock>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "MockSettlement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSettlement>;
    deployContract(
      name: "Settlement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Settlement>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
