/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface OFTStakingMockV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DST_GAS_FOR_CALL"
      | "PT_DEPOSIT_TO_REMOTE_CHAIN"
      | "balances"
      | "deposit"
      | "depositToDstChain"
      | "oft"
      | "onOFTReceived"
      | "paused"
      | "quoteForDeposit"
      | "remoteStakingContracts"
      | "setPaused"
      | "setRemoteStakingContract"
      | "withdraw"
      | "withdrawTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "DepositToDstChain" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DST_GAS_FOR_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PT_DEPOSIT_TO_REMOTE_CHAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToDstChain",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onOFTReceived",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteForDeposit",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteStakingContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setRemoteStakingContract",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DST_GAS_FOR_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PT_DEPOSIT_TO_REMOTE_CHAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToDstChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onOFTReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteForDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteStakingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositToDstChainEvent {
  export type InputTuple = [
    from: AddressLike,
    dstChainId: BigNumberish,
    to: BytesLike,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    dstChainId: bigint,
    to: string,
    amountOut: bigint
  ];
  export interface OutputObject {
    from: string;
    dstChainId: bigint;
    to: string;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OFTStakingMockV2 extends BaseContract {
  connect(runner?: ContractRunner | null): OFTStakingMockV2;
  waitForDeployment(): Promise<this>;

  interface: OFTStakingMockV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DST_GAS_FOR_CALL: TypedContractMethod<[], [bigint], "view">;

  PT_DEPOSIT_TO_REMOTE_CHAIN: TypedContractMethod<[], [bigint], "view">;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  deposit: TypedContractMethod<[_amount: BigNumberish], [void], "payable">;

  depositToDstChain: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _to: BytesLike,
      _amount: BigNumberish,
      _adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;

  oft: TypedContractMethod<[], [string], "view">;

  onOFTReceived: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _from: BytesLike,
      _amount: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  quoteForDeposit: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _to: BytesLike,
      _amount: BigNumberish,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  remoteStakingContracts: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setRemoteStakingContract: TypedContractMethod<
    [_chainId: BigNumberish, _stakingContract: BytesLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  withdrawTo: TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DST_GAS_FOR_CALL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PT_DEPOSIT_TO_REMOTE_CHAIN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToDstChain"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _to: BytesLike,
      _amount: BigNumberish,
      _adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "oft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onOFTReceived"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _from: BytesLike,
      _amount: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "quoteForDeposit"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _to: BytesLike,
      _amount: BigNumberish,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "remoteStakingContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRemoteStakingContract"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _stakingContract: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DepositToDstChain"
  ): TypedContractEvent<
    DepositToDstChainEvent.InputTuple,
    DepositToDstChainEvent.OutputTuple,
    DepositToDstChainEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DepositToDstChain(address,uint16,bytes,uint256)": TypedContractEvent<
      DepositToDstChainEvent.InputTuple,
      DepositToDstChainEvent.OutputTuple,
      DepositToDstChainEvent.OutputObject
    >;
    DepositToDstChain: TypedContractEvent<
      DepositToDstChainEvent.InputTuple,
      DepositToDstChainEvent.OutputTuple,
      DepositToDstChainEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
